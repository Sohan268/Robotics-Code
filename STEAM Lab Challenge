#include <kipr/wombat.h>

//Define Variables
int rmotor = 0;              //Defining the port of the right motor
int lmotor = 3;              //Defining the port of the left motor
int forward_speed = 40;      //Defining the speed value associated with the "forward_speed" variable
int backward_speed = -40;    //Defining the speed value associated with the "backward_speed" variable
int slow_forward_speed = 20;  //Defining the speed value associated with the "slow_forward_speed" variable
int slow_backward_speed = -20;   //Defining the speed value associated with the "slow_backward_speed" variable


int back_sensor = 0;             //Defining the "back_sensor" port
int line_follow_sensor = 0;      //Defining the "line_follow_sensor" port
int stop_sensor = 1;           //Defining the "stop_sensor" port
int back_bottom_sensor = 5;     //Defining the "back_bottom_sensor" port

int bottomtarget = 1000;       //Defining the target value for the IR sensors

int start_0 = 300;             //Defining a value for the position of the start of servo 0
int end_0 = 1700;               //Defining a value for the position for the end of servo 0

int start_1 = 1200;             //Defining a value for the position of the start of servo 1             
int end_1 = 1700;               //Defining a value for the position for the end of servo 1

int servo_0 = 0;                //Defining servo port
int servo_1 = 1;                //Defining servo port            
int servo_2 = 2;               //Defining servo port

int main()                    //main function 
{
    shut_down_in(120.0);       //shuts down the robot after 120 seconds 

    capture_botguy();				//calls "capture_botguy" function to lower claw over botguy
    
    lift_mini_servo();				//calls "lift_mini_servo" function to lift and hold mini servo in an up position
    
    while(digital(back_sensor) == 0)		//back up into wall until the button is triggered 
    {
        backward();                //calls "backward" function to move backwards
    }
    ao();                         //turn all motors off
    
    medium_lift();					//call "medium_lift" function to lift claw over second group of poms
    
    turn_left();					//turn robot left to align with second group of poms
    msleep(450);                   //do previous function for .45 seconds
    ao();                          //turn all motors off
    
    open_claw();					//calls "open_claw" function to open claw to collect poms
    
    drop();						//calls "drop" function to drop the claw
        
    while(analog(stop_sensor) < 3000)	//line follow along the center black line with 
    {
        if(analog(line_follow_sensor) < bottomtarget) // execute the following code if the IR sensor sees white 
        {
            right_turn_mini();              //calls "right_turn_mini" function to ajust right
        }

    	if(analog(line_follow_sensor) > bottomtarget) // execute the following code if the IR sensor sees black
    	{
        	left_turn_mini();             //calls "left_turn_mini" function to ajust left
    	}
    }
    ao();                              //turn all motos off
    
    forward();					//calls "forward" fucntion to more forward to bypass black tape in base
    msleep(1000);               //execute the following code for 1 second
    ao();                       //turn all motors off
    
    while(analog(stop_sensor) < 3000)	//continue line follow along the center black line until the stop sensor on the claw is triggered
    {
        if(analog(line_follow_sensor) < bottomtarget)        // execute the following code if the IR sensor sees white 
        {
            right_turn_mini();                    //calls "right_turn_mini" function to ajust right
        } 

    	if(analog(line_follow_sensor) > bottomtarget)         // execute the following code if the IR sensor sees black
    	{
        	left_turn_mini();                      //calls "left_turn_mini" function to ajust left
    	}
    }
    ao();                                     // turn all motors off
    
    backward();					//calls "backward" function to back up after stopping
    msleep(150);                //execute the previous code for .150 seconds
    ao();                       //turn all motors off
        
    close_claw();					//calls the "close_claw" function to close claw to collect poms

    transport_lift();				//calls the "transport_lift function" to lift claw over transporter
        
    msleep(1000);					//pause the robot for 1 second

    
    while(analog(stop_sensor) > 1000)	//execute the following code until the stop_sensor senses transporter 
    {
        left_turn_mini_sharp();        //calls the "left_turn_mini_sharp"
    }
    ao();                             //turns all motors off

    forward();					//move forward to approach transporter
    msleep(1250);
    ao();
        
    open_claw();					//open claw to drop poms into transporter
    
    msleep(1000);					//wait 1 second
    
    shake();						//shake any remaining poms into transporter
        
    while(analog(5) < 2500)			//quickly back up until [sensor] senses center black line
    {
        fast_backward();
    }
    ao();

    forward();					//move forward
    msleep(400);
    ao();
    
    turn_right();					//turn right to better align with center black line
    msleep(800);
    ao();
    
    while(analog(2) < 3500)			//line follow along center black line 
    {
        if(analog(5) < bottomtarget)
        {
            right_turn_mini_2();
        }

    	if(analog(5) > bottomtarget)
    	{
        	left_turn_mini_2();
    	}
    }
    ao();
    
    close_claw();					//close claw

    lift_mini_servo();				//lift and hold up mini servo
    
    msleep(500);					//wait 0.5 seconds
    
    forward();					//move forward
    msleep(250);
    ao();
    
    slow_turn_right();				//slowly turn right to bypass black line of the farming zone
    msleep(4000);
    ao();
    
    while(analog(2) < 3500)			//continue slow turn right until [sensor] senses center black line
    {
        slow_turn_right();
    }
    ao();
    
    slow_turn_right();				//continue slow right turn to align with transporter
    msleep(1000);
    ao();
            
    while(digital(back_sensor) == 0)		//move quickly backwards until back_sensor is pressed
    {
        fast_backward();
    }
    ao();
    
    msleep(750);					//wait 0.75 seconds
    
    lift();						//lift claw to upright position
    
    msleep(750);					//wait 0.75 seconds
    
    drop_mini_servo();				//drop and hold mini servo
                
    fast_forward();				//move forward for 6.25 seconds, leaving transporter in farming zone
    msleep(6250);					//and botguy in the shelter
    ao();
        
    return 0;					//end program
}

void forward()
{
    motor(lmotor, forward_speed);
    motor(rmotor, forward_speed); 
}

void backward()
{
    motor(lmotor, backward_speed);
    motor(rmotor, backward_speed); 
}

void slow_forward()
{
    motor(lmotor, slow_forward_speed);
    motor(rmotor, slow_forward_speed);
}

void slow_backward()
{
    motor(lmotor, slow_backward_speed);
    motor(rmotor, slow_backward_speed); 
}

void fast_forward()
{
    motor(lmotor, 60);
    motor(rmotor, 65); 
}

void fast_backward()
{
    motor(lmotor, -55);
    motor(rmotor, -95); 
}
          
void turn_left()
{
    motor(lmotor, backward_speed);
    motor(rmotor, forward_speed);
}

void turn_right()
{
    motor(lmotor, forward_speed);
    motor(rmotor, backward_speed);
}

void slow_turn_left()
{
    motor(lmotor, slow_backward_speed);
    motor(rmotor, slow_forward_speed);
}

void slow_turn_right()
{
    motor(lmotor, slow_forward_speed);
    motor(rmotor, slow_backward_speed);
}

void right_turn_mini()
{
    motor(lmotor,70);
    motor(rmotor,50);
}

void left_turn_mini()
{
    motor(lmotor,50);
    motor(rmotor,70);
}

void right_turn_mini_2()
{
    motor(lmotor,50);
    motor(rmotor,20);
}

void left_turn_mini_2()
{
    motor(lmotor,20);
    motor(rmotor,50);
}


void left_turn_mini_sharp()
{
    motor(lmotor,-30);
    motor(rmotor,30);
}
         
void capture_botguy()
{
    forward();
    msleep(1750);
    ao();
    
    enable_servos();
    
    while(start_0<end_0)
    {
        set_servo_position(servo_1, start_0);
        msleep(20);
        start_0 = start_0 + 10;
    }
        
    disable_servos();
}

void lift()
{
    enable_servos();
    
    set_servo_position(servo_1, 300);
    msleep(500);
        
    disable_servos();
}

void medium_lift()
{
    enable_servos();
    
    set_servo_position(servo_1, 1200);
    msleep(750);
        
    disable_servos();
}

void transport_lift()
{
    enable_servos();
    
    set_servo_position(servo_1, 1300);
    msleep(750);
            
    disable_servos();
}


void little_lift()
{
    enable_servos();
    
    set_servo_position(servo_1, 1400);
    msleep(500);
        
    disable_servos();
}

void drop()
{
    enable_servos();
    
    while(start_1<end_1)
    {
        set_servo_position(servo_1, start_1);
        msleep(20);
        start_1 = start_1 + 10;
    }
        
    disable_servos();
}

void open_claw()
{
    enable_servos();
    
    set_servo_position(servo_0, 1700);
    msleep(1000);
        
    disable_servos();
}

void close_claw()
{
    enable_servos();
    
    set_servo_position(servo_0, 900);
    msleep(1000);
        
    disable_servos();
}

void shake()
{
    enable_servos();
    
    set_servo_position(servo_1, 1300);
    msleep(250);
    
   	set_servo_position(servo_1, 1200);
    msleep(250);
    
    set_servo_position(servo_1, 1300);
    msleep(250);
    
   	set_servo_position(servo_1, 1200);
    msleep(250);
    
    disable_servos();
}

void lift_mini_servo()
{
    enable_servos();
    
    set_servo_position(servo_2, 1000);
    msleep(200);
}

void drop_mini_servo()
{
    enable_servos();
    
    set_servo_position(servo_2, 100);
    msleep(200);
}

